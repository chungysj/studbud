{"mappings":"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","sources":["./public/component/navigation.js","./public/component/tasklist.js","./public/script.js"],"sourcesContent":["class Navigation {\n    constructor(links, pages){\n        this.links = links;\n        this.pages = pages;\n        this.currentPage = null;\n    }\n\n    getLinks() {\n        console.log(this.links);\n    }\n\n    setPage(pageId) {\n        this.currentPage = pageId;\n        console.log(this.currentPage);\n\n        this.links.forEach((link) => {\n            link.classList.remove('active');\n            if (this.getHash(link) === pageId) {\n                link.classList.add('active');\n            }\n        })\n\n        this.pages.forEach((page) => {\n            page.style.display = 'none';\n        })\n\n        document.getElementById(pageId).style.display = \"block\";\n    }\n\n    getHash(link) {\n        return link.href.split('#')[1];\n    }\n}\n\nexport default Navigation;","const form = document.getElementById(\"taskform\");\nconst button = document.querySelector(\"#taskform > button\")\nvar taskInput = document.getElementById(\"taskInput\");\nvar tasklist = document.getElementById(\"tasklist\");\n\nvar dueDateInput = document.getElementById(\"dueDateInput\");\nvar completionTimeInput = document.getElementById(\"completionTimeInput\");\nvar estimatedTimeInput = document.getElementById(\"estimatedTimeInput\");\nvar priorityInput = document.getElementById(\"priorityInput\");\n\nform.addEventListener(\"submit\", function(event){\n    event.preventDefault();\n    let task = taskInput.value;\n    let dueDate = dueDateInput.value;\n    let completionTime = completionTimeInput.value;\n    let estimatedTime = estimatedTimeInput.value;\n    let priorityRating = priorityInput.options[priorityInput.selectedIndex].value;\n    if (task) {\n        addTask(task, dueDate, estimatedTime, priorityRating, completionTime, false); \n        console.log(tasklist);\n    }\n})\n\nvar taskListArray = [];\n\nfunction addTask(taskDescription, dueDate, estimatedTime, priorityRating, completionTime, completionStatus) {\n    let d = new Date();\n    let dateCreated = d.getFullYear();\n    let task = {  \n        // this id is going to be a way we can link our tasks inside the array to the task that is going to display on the screen\n        // use the Date() field tiem. use the data.now function to return that date as a time stamp  \n      id: Date.now(),\n      taskDescription,\n      dueDate,\n      dateCreated,\n      estimatedTime,\n      completionTime,\n      priorityRating,\n      estimatedTime,\n      completionStatus\n    };\n    taskListArray.push(task);\n    console.log(taskListArray);\n    renderTask(task);\n  }\n\nfunction renderTask(task){\n\n    updateEmpty();\n\n\n    // Create HTML elements\n    let item = document.createElement(\"li\");\n    // set this up as a html attribute, so we can create arbitrary html attributes for different data we install. \n    // we do this by using the set attribute function, for the name attribute we usually use the data pre fix followed by whatever type of data we're storing \n    item.setAttribute('data-id', task.id);\n    item.innerHTML = \"<p>\" + task.taskDescription + \"</p>\" + \"<p>\" + task.dueDate + \"</p>\" + \"<p>\" + task.dateCreated + \"</p>\" + \"<p>\" + task.estimatedTime + \"</p>\" + \"<p>\" + task.completionTime + \"</p>\" + \"<p>\" + task.priorityRating + \"</p>\" + \"<p>\" + task.completionStatus + \"</p>\";\n  \n    tasklist.appendChild(item);\n  \n    // Extra Task DOM elements\n    let delButton = document.createElement(\"button\");\n    let delButtonText = document.createTextNode(\"Delete Task\");\n    delButton.appendChild(delButtonText);\n    item.appendChild(delButton);\n  \n  \n    // Event Listeners for DOM elements\n    delButton.addEventListener(\"click\", function(event){\n      event.preventDefault();\n      console.log(taskListArray);\n      // create a code that is going to check the id then delete it from the array if necessary \n      let id = event.target.parentElement.getAttribute('data-id');\n      // with that id we are going to compare it to the value of the array \n      // A tricky line that will allow us to search through an array and return in index, given an input that we provide which would be the value of the item in the array \n      let index = taskListArray.findIndex(task => task.id === Number(id));\n\n      // remove that Item from the array all together once they click the delete button, we are going to do this in a function we will create called remove item from array \n      removeItemFromArray(taskListArray,index)\n      console.log(taskListArray);\n      item.remove();\n    })\n  \n    // Clear the input form\n    form.reset();\n  }\n\n//  function to remove that frmom the array \n  function removeItemFromArray(arr, index) {\n      if (index > -1){\n          arr.splice(index, 1)\n      }\n      return arr;\n  }\n\n// Make sure this makes sense for the user, and it doesnt tell them they havent added tasks, when they clearly have \n// Add in a function to update this depending on if theres a task in the array or not \nfunction updateEmpty() {\n    if (taskListArray.length > 0){\n        document.getElementById('emptyList').style.display = 'none';\n    } else {\n        document.getElementById('emptyList').style.display = 'block';\n    }\n}\n","import Navigation from './component/navigation';\nimport './component/tasklist';\n\nconst links = document.querySelectorAll('.top-nav > ul > li > a');\nconst pages = document.querySelectorAll('.page-container');\n\nvar nav = new Navigation(links, pages);\nnav.getLinks();\n\n// For Each loop that allows us to loop through arrays or collections one by one and output each iteration or resulting item from each iteration as a input parameter as a call back function\n// which then will passs down to any other functions \n// in this case we say for each of the link we want to add a event listener which listens out for the 'click' function and when that click function happens we want a console log out the link to the console\nnav.links.forEach(function(link) {\n    link.addEventListener('click', function() {\n        let pageId = nav.getHash(link);\n        nav.setPage(pageId);\n    })\n})\n\nconst subLinks = document.querySelectorAll('.sub-nav > ul > li > a')\nconst subPages = document.querySelectorAll('.sub-page-container')\n\nvar subNav = new Navigation(subLinks, subPages);\n\nsubNav.links.forEach((link) => {\n    link.addEventListener('click', function() {\n        let pageId = subNav.getHash(link);\n        subNav.setPage(pageId);\n    })\n})"],"names":["$502fad0b4cc7ce951f0308a053376e59$export$default","constructor","links","pages","this","currentPage","getLinks","console","log","setPage","pageId","forEach","link","classList","remove","getHash","add","page","style","display","document","getElementById","href","split","$c6c9705ceba6d9e84bd4556206947784$var$form","querySelector","$c6c9705ceba6d9e84bd4556206947784$var$taskInput","$c6c9705ceba6d9e84bd4556206947784$var$tasklist","$c6c9705ceba6d9e84bd4556206947784$var$dueDateInput","$c6c9705ceba6d9e84bd4556206947784$var$completionTimeInput","$c6c9705ceba6d9e84bd4556206947784$var$estimatedTimeInput","$c6c9705ceba6d9e84bd4556206947784$var$priorityInput","addEventListener","event","preventDefault","task","value","dueDate","completionTime","estimatedTime","priorityRating","options","selectedIndex","taskDescription","completionStatus","dateCreated","d","Date","getFullYear","id","now","$c6c9705ceba6d9e84bd4556206947784$var$taskListArray","push","length","item","createElement","setAttribute","innerHTML","appendChild","delButton","delButtonText","createTextNode","target","parentElement","getAttribute","index","findIndex","Number","arr","splice","$c6c9705ceba6d9e84bd4556206947784$var$removeItemFromArray","reset","$c6c9705ceba6d9e84bd4556206947784$var$renderTask","$c6c9705ceba6d9e84bd4556206947784$var$addTask","$aba770e9ce7dbb561d9a46041b248abf$var$nav","querySelectorAll","$aba770e9ce7dbb561d9a46041b248abf$var$subNav"],"version":3,"file":"index.HASH_REF_f12f294504766d489aa5c3d9684d6f31.js.map"}